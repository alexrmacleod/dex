{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/dex/client/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Header from './Header.js';\nimport Footer from './Footer.js';\nimport Wallet from './Wallet.js';\nimport NewOrder from './NewOrder.js';\nconst SIDE = {\n  BUY: 0,\n  SELL: 1\n};\n\nfunction App({\n  web3,\n  accounts,\n  contracts\n}) {\n  const [tokens, setTokens] = useState([]);\n  const [user, setUser] = useState({\n    accounts: [],\n    balances: {\n      tokenDex: 0,\n      tokenWallet: 0\n    },\n    selectedToken: undefined\n  });\n\n  const getBalances = async (account, token) => {\n    const tokenDex = await contracts.dex.methods.traderBalances(account, web3.utils.fromAscii(token.ticker)).call();\n    const tokenWallet = await contracts[token.ticker].methods.balanceOf(account).call();\n    return {\n      tokenDex,\n      tokenWallet\n    };\n  };\n\n  const selectToken = token => {\n    setUser({ ...user,\n      selectedToken: token\n    });\n  };\n\n  const deposit = async amount => {\n    await contracts[user.selectedToken.ticker].methods.approve(contracts.dex.options.address, amount).send({\n      from: user.accounts[0]\n    });\n    await contracts.dex.methods.deposit(amount, web3.utils.fromAscii(user.selectedToken.ticker)).send({\n      from: user.accounts[0]\n    });\n    const balances = getBalances(user.accounts[0], user.selectedToken);\n    setUser(user => ({ ...user,\n      balances\n    }));\n  };\n\n  const withdraw = async amount => {\n    await contracts.dex.methods.withdraw(amount, web3.utils.fromAscii(user.selectedToken.ticker)).send({\n      from: user.accounts[0]\n    });\n    const balances = getBalances(user.accounts[0], user.selectedToken);\n    setUser(user => ({ ...user,\n      balances\n    }));\n  };\n\n  const createMarketOrder = async (amount, side) => {\n    await contracts.dex.methods.createMarketOrder();\n  };\n\n  useEffect(() => {\n    const init = async () => {\n      const rawTokens = await contracts.dex.methods.getTokens().call();\n      const tokens = rawTokens.map(token => ({ ...token,\n        ticker: web3.utils.hexToUtf8(token.ticker)\n      }));\n      const balances = await getBalances(accounts[0], tokens[0]);\n      setTokens(tokens);\n      setUser({\n        accounts,\n        balances,\n        selectedToken: tokens[0]\n      });\n    };\n\n    init();\n  }, []);\n\n  if (typeof user.selectedToken === 'undefined') {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Loading...\");\n  }\n\n  return React.createElement(\"div\", {\n    id: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Header, {\n    contracts: contracts,\n    tokens: tokens,\n    user: user,\n    selectToken: selectToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), React.createElement(\"main\", {\n    className: \"container-fluid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-sm-4 first-col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Wallet, {\n    user: user,\n    deposit: deposit,\n    withdraw: withdraw,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })))), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alex/Documents/dex/client/src/App.js"],"names":["React","useState","useEffect","Header","Footer","Wallet","NewOrder","SIDE","BUY","SELL","App","web3","accounts","contracts","tokens","setTokens","user","setUser","balances","tokenDex","tokenWallet","selectedToken","undefined","getBalances","account","token","dex","methods","traderBalances","utils","fromAscii","ticker","call","balanceOf","selectToken","deposit","amount","approve","options","address","send","from","withdraw","createMarketOrder","side","init","rawTokens","getTokens","map","hexToUtf8"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Header from './Header.js';\nimport Footer from './Footer.js';\nimport Wallet from  './Wallet.js';\nimport NewOrder from './NewOrder.js';\n\nconst SIDE = {\n  BUY: 0,\n  SELL: 1\n};\n\nfunction App({web3, accounts, contracts}) {\n  const [tokens, setTokens] = useState([]);\n  const [user, setUser] = useState({\n    accounts: [],\n    balances: {\n      tokenDex: 0,\n      tokenWallet: 0\n    },\n    selectedToken: undefined\n  });\n\n  const getBalances = async (account, token) => {\n    const tokenDex = await contracts.dex.methods\n      .traderBalances(account, web3.utils.fromAscii(token.ticker))\n      .call();\n    const tokenWallet = await contracts[token.ticker].methods\n      .balanceOf(account)\n      .call()\n    return {tokenDex, tokenWallet};\n  }\n  const selectToken = token => {\n    setUser({...user, selectedToken: token});\n  }\n\n  const deposit = async amount => {\n    await contracts[user.selectedToken.ticker].methods\n      .approve(contracts.dex.options.address, amount)\n      .send({from: user.accounts[0]});\n    await contracts.dex.methods\n      .deposit(\n        amount,\n        web3.utils.fromAscii(user.selectedToken.ticker)\n      )\n      .send({from: user.accounts[0]});\n    const balances = getBalances(\n      user.accounts[0],\n      user.selectedToken\n    )\n    setUser(user => ({...user, balances}));\n  }\n\n  const withdraw = async amount => {\n    await contracts.dex.methods\n      .withdraw(\n        amount,\n        web3.utils.fromAscii(user.selectedToken.ticker)\n      )\n      .send({from: user.accounts[0]});\n    const balances = getBalances(\n      user.accounts[0],\n      user.selectedToken\n    )\n    setUser(user => ({...user, balances}));\n  }\n\n  const createMarketOrder = async (amount, side) => {\n    await contracts.dex.methods\n      .createMarketOrder(\n        \n      )\n  }\n  useEffect(() => {\n    const init = async () => {\n      const rawTokens = await contracts.dex.methods.getTokens().call(); \n      const tokens = rawTokens.map(token => ({\n        ...token,\n        ticker: web3.utils.hexToUtf8(token.ticker)\n      }));\n      const balances = await getBalances(accounts[0], tokens[0]);\n      setTokens(tokens);\n      setUser({accounts, balances, selectedToken: tokens[0]});\n    }\n    init();\n  }, []);\n\n  if(typeof user.selectedToken === 'undefined') {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div id=\"app\">\n     <div>\n       <Header\n        contracts={contracts}\n        tokens={tokens}\n        user={user}\n        selectToken={selectToken}\n       />\n      </div>\n      <main className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-sm-4 first-col\">\n            <Wallet \n              user={user}\n              deposit={deposit}\n              withdraw={withdraw}\n            />\n          </div>  \n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}