{"ast":null,"code":"import Web3 from \"web3\";\nimport Dex from \"./contracts/Dex.json\";\nimport ERC20Abi from \"./ERC20Abi.json\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\n\nconst getWeb3 = () => new Promise(async (resolve, reject) => {\n  let provider = await detectEthereumProvider();\n\n  if (provider) {\n    await provider.request({\n      method: \"eth_requestAccounts\"\n    });\n\n    try {\n      const web3 = new Web3(window.ethereum);\n      resolve(web3);\n    } catch (error) {\n      reject(error);\n    }\n  }\n\n  reject(\"Install Metamask\");\n});\n\nconst getContracts = async web3 => {\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = Dex.networks[networkId];\n  const dex = new web3.eth.Contract(Dex.abi, deployedNetwork && deployedNetwork.address);\n  const tokens = await dex.methods.getTokens().call();\n  const tokenContracts = tokens.reduce((acc, token) => ({ ...acc,\n    [web3.utils.hexToUtf8(token.ticker)]: new web3.eth.Contract(ERC20Abi, token.tokenAddress)\n  }), {});\n  return {\n    dex,\n    ...tokenContracts\n  };\n};\n\nexport { getWeb3, getContracts };","map":{"version":3,"sources":["/Users/alex/Documents/dex/client/src/utils.js"],"names":["Web3","Dex","ERC20Abi","detectEthereumProvider","getWeb3","Promise","resolve","reject","provider","request","method","web3","window","ethereum","error","getContracts","networkId","eth","net","getId","deployedNetwork","networks","dex","Contract","abi","address","tokens","methods","getTokens","call","tokenContracts","reduce","acc","token","utils","hexToUtf8","ticker","tokenAddress"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AACrC,MAAIC,QAAQ,GAAG,MAAML,sBAAsB,EAA3C;;AAEA,MAAIK,QAAJ,EAAc;AACZ,UAAMA,QAAQ,CAACC,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAN;;AAEA,QAAI;AACF,YAAMC,IAAI,GAAG,IAAIX,IAAJ,CAASY,MAAM,CAACC,QAAhB,CAAb;AAEAP,MAAAA,OAAO,CAACK,IAAD,CAAP;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACdP,MAAAA,MAAM,CAACO,KAAD,CAAN;AACD;AACF;;AACDP,EAAAA,MAAM,CAAC,kBAAD,CAAN;AACD,CAfD,CADF;;AAkBA,MAAMQ,YAAY,GAAG,MAAOJ,IAAP,IAAgB;AACnC,QAAMK,SAAS,GAAG,MAAML,IAAI,CAACM,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,QAAMC,eAAe,GAAGnB,GAAG,CAACoB,QAAJ,CAAaL,SAAb,CAAxB;AACA,QAAMM,GAAG,GAAG,IAAIX,IAAI,CAACM,GAAL,CAASM,QAAb,CACVtB,GAAG,CAACuB,GADM,EAEVJ,eAAe,IAAIA,eAAe,CAACK,OAFzB,CAAZ;AAKA,QAAMC,MAAM,GAAG,MAAMJ,GAAG,CAACK,OAAJ,CAAYC,SAAZ,GAAwBC,IAAxB,EAArB;AACA,QAAMC,cAAc,GAAGJ,MAAM,CAACK,MAAP,CACrB,CAACC,GAAD,EAAMC,KAAN,MAAiB,EACf,GAAGD,GADY;AAEf,KAACrB,IAAI,CAACuB,KAAL,CAAWC,SAAX,CAAqBF,KAAK,CAACG,MAA3B,CAAD,GAAsC,IAAIzB,IAAI,CAACM,GAAL,CAASM,QAAb,CACpCrB,QADoC,EAEpC+B,KAAK,CAACI,YAF8B;AAFvB,GAAjB,CADqB,EAQrB,EARqB,CAAvB;AAUA,SAAO;AAAEf,IAAAA,GAAF;AAAO,OAAGQ;AAAV,GAAP;AACD,CApBD;;AAsBA,SAAS1B,OAAT,EAAkBW,YAAlB","sourcesContent":["import Web3 from \"web3\";\nimport Dex from \"./contracts/Dex.json\";\nimport ERC20Abi from \"./ERC20Abi.json\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\n\nconst getWeb3 = () =>\n  new Promise(async (resolve, reject) => {\n    let provider = await detectEthereumProvider();\n\n    if (provider) {\n      await provider.request({ method: \"eth_requestAccounts\" });\n\n      try {\n        const web3 = new Web3(window.ethereum);\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    }\n    reject(\"Install Metamask\");\n  });\n\nconst getContracts = async (web3) => {\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = Dex.networks[networkId];\n  const dex = new web3.eth.Contract(\n    Dex.abi,\n    deployedNetwork && deployedNetwork.address\n  );\n\n  const tokens = await dex.methods.getTokens().call();\n  const tokenContracts = tokens.reduce(\n    (acc, token) => ({\n      ...acc,\n      [web3.utils.hexToUtf8(token.ticker)]: new web3.eth.Contract(\n        ERC20Abi,\n        token.tokenAddress\n      ),\n    }),\n    {}\n  );\n  return { dex, ...tokenContracts };\n};\n\nexport { getWeb3, getContracts };\n"]},"metadata":{},"sourceType":"module"}